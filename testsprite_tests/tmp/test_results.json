[
  {
    "projectId": "12686b31-c3da-4a3f-af26-bc9e69e23489",
    "testId": "64d4648c-cf32-46d9-bea9-b7033921cd59",
    "userId": "64f804e8-2061-7070-d569-d70d597eb938",
    "title": "TC001-login with valid and invalid credentials",
    "description": "Test the /auth/login endpoint with valid NIK and password to ensure successful login and token issuance. Also test with invalid credentials to verify proper 401 Unauthorized response.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:3000/api\"\nTIMEOUT = 30\n\n\ndef test_login_with_valid_and_invalid_credentials():\n    url = f\"{BASE_URL}/auth/login\"\n    headers = {\n        \"Content-Type\": \"application/json\"\n    }\n\n    # Valid credentials (from instructions: basic token credential username as NIK, password)\n    valid_payload = {\n        \"nik\": \"ADM001\",\n        \"password\": \"admin123\"\n    }\n\n    # Test login with valid credentials\n    try:\n        response = requests.post(url, json=valid_payload, headers=headers, timeout=TIMEOUT)\n    except requests.RequestException as e:\n        assert False, f\"Request failed for valid credentials: {e}\"\n\n    assert response.status_code == 200, f\"Expected status 200 for valid login, got {response.status_code}\"\n    try:\n        resp_json = response.json()\n    except Exception:\n        assert False, \"Response is not valid JSON on valid login\"\n\n    assert \"accessToken\" in resp_json and isinstance(resp_json[\"accessToken\"], str) and resp_json[\"accessToken\"], \"accessToken missing or empty\"\n    assert \"refreshToken\" in resp_json and isinstance(resp_json[\"refreshToken\"], str) and resp_json[\"refreshToken\"], \"refreshToken missing or empty\"\n    assert \"user\" in resp_json and isinstance(resp_json[\"user\"], dict), \"user object missing in response\"\n\n    user = resp_json[\"user\"]\n    required_user_fields = {\"id\", \"username\", \"role\", \"createdAt\"}\n    assert required_user_fields.issubset(user.keys()), f\"user object missing fields {required_user_fields - user.keys()}\"\n\n    # Invalid credentials tests\n    invalid_credentials_list = [\n        {\"nik\": \"wrongnik\", \"password\": \"admin123\"},\n        {\"nik\": \"ADM001\", \"password\": \"wrongpassword\"},\n        {\"nik\": \"\", \"password\": \"admin123\"},\n        {\"nik\": \"ADM001\", \"password\": \"\"},\n        {\"nik\": \"nonexistent\", \"password\": \"nopassword\"}\n    ]\n\n    for invalid_cred in invalid_credentials_list:\n        try:\n            resp = requests.post(url, json=invalid_cred, headers=headers, timeout=TIMEOUT)\n        except requests.RequestException as e:\n            assert False, f\"Request failed for invalid credentials {invalid_cred}: {e}\"\n\n        assert resp.status_code == 401, f\"Expected 401 for invalid login {invalid_cred}, got {resp.status_code}\"\n\n\ntest_login_with_valid_and_invalid_credentials()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 57, in <module>\n  File \"<string>\", line 37, in test_login_with_valid_and_invalid_credentials\nAssertionError: user object missing fields {'username', 'role'}\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-05T03:07:33.609Z",
    "modified": "2025-10-05T03:08:38.212Z"
  },
  {
    "projectId": "12686b31-c3da-4a3f-af26-bc9e69e23489",
    "testId": "611c44ad-9e81-4a19-8ebd-a4ed27317134",
    "userId": "64f804e8-2061-7070-d569-d70d597eb938",
    "title": "TC002-refresh jwt tokens with valid and invalid refresh token",
    "description": "Test the /auth/refresh endpoint by providing a valid refresh token to receive new access and refresh tokens. Also test with an invalid or expired refresh token to ensure 401 Unauthorized response.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:3000/api\"\nAUTH_LOGIN_ENDPOINT = \"/auth/login\"\nAUTH_REFRESH_ENDPOINT = \"/auth/refresh\"\nTIMEOUT = 30\n\nUSERNAME = \"ADM001\"\nPASSWORD = \"admin123\"\n\ndef test_refresh_jwt_tokens_with_valid_and_invalid_refresh_token():\n    try:\n        # Step 1: Login to get valid tokens\n        login_payload = {\n            \"nik\": USERNAME,\n            \"password\": PASSWORD\n        }\n\n        login_response = requests.post(\n            BASE_URL + AUTH_LOGIN_ENDPOINT,\n            json=login_payload,\n            timeout=TIMEOUT\n        )\n        assert login_response.status_code == 200, f\"Login failed with status code {login_response.status_code}\"\n        login_data = login_response.json()\n        valid_refresh_token = login_data.get(\"refreshToken\")\n        assert valid_refresh_token, \"No refreshToken received on login\"\n\n        # Step 2: Refresh tokens using valid refresh token\n        refresh_payload_valid = {\n            \"refreshToken\": valid_refresh_token\n        }\n        refresh_response_valid = requests.post(\n            BASE_URL + AUTH_REFRESH_ENDPOINT,\n            json=refresh_payload_valid,\n            timeout=TIMEOUT\n        )\n        assert refresh_response_valid.status_code == 200, f\"Refresh failed with valid token, status code {refresh_response_valid.status_code}\"\n        refresh_data = refresh_response_valid.json()\n        assert \"accessToken\" in refresh_data and \"refreshToken\" in refresh_data, \"Refresh response missing tokens\"\n\n        # Step 3: Refresh tokens using invalid refresh token\n        invalid_refresh_token = \"invalid_or_expired_refresh_token_xyz\"\n        refresh_payload_invalid = {\n            \"refreshToken\": invalid_refresh_token\n        }\n        refresh_response_invalid = requests.post(\n            BASE_URL + AUTH_REFRESH_ENDPOINT,\n            json=refresh_payload_invalid,\n            timeout=TIMEOUT\n        )\n        assert refresh_response_invalid.status_code == 401, (\n            f\"Expected 401 Unauthorized for invalid refresh token, got {refresh_response_invalid.status_code}\"\n        )\n    except requests.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\ntest_refresh_jwt_tokens_with_valid_and_invalid_refresh_token()\n",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-05T03:07:33.617Z",
    "modified": "2025-10-05T03:08:57.799Z"
  },
  {
    "projectId": "12686b31-c3da-4a3f-af26-bc9e69e23489",
    "testId": "3df46c37-6686-493a-b31f-5ddec68c7f29",
    "userId": "64f804e8-2061-7070-d569-d70d597eb938",
    "title": "TC003-logout current session successfully",
    "description": "Test the /auth/logout endpoint to ensure the current user session is properly terminated and a success response is returned.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:3000/api\"\nUSERNAME = \"ADM001\"\nPASSWORD = \"admin123\"\nTIMEOUT = 30\n\ndef test_logout_current_session_successfully():\n    login_url = f\"{BASE_URL}/auth/login\"\n    logout_url = f\"{BASE_URL}/auth/logout\"\n\n    login_payload = {\n        \"nik\": USERNAME,\n        \"password\": PASSWORD\n    }\n\n    try:\n        # Login to get access token\n        login_resp = requests.post(login_url, json=login_payload, timeout=TIMEOUT)\n        assert login_resp.status_code == 200, f\"Login failed: {login_resp.text}\"\n        login_data = login_resp.json()\n        access_token = login_data.get(\"accessToken\")\n        assert access_token, \"Access token not found in login response\"\n\n        headers = {\"Authorization\": f\"Bearer {access_token}\"}\n\n        # Call logout endpoint\n        logout_resp = requests.post(logout_url, headers=headers, timeout=TIMEOUT)\n        assert logout_resp.status_code == 200, f\"Logout failed: {logout_resp.text}\"\n\n    except requests.RequestException as e:\n        assert False, f\"RequestException occurred: {e}\"\n\n\ntest_logout_current_session_successfully()",
    "testStatus": "PASSED",
    "testError": "",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-05T03:07:33.622Z",
    "modified": "2025-10-05T03:08:20.411Z"
  },
  {
    "projectId": "12686b31-c3da-4a3f-af26-bc9e69e23489",
    "testId": "c46f7f0e-0dcc-487c-842b-758772b17122",
    "userId": "64f804e8-2061-7070-d569-d70d597eb938",
    "title": "TC004-get current user profile with valid and invalid token",
    "description": "Test the /auth/me endpoint to retrieve the current authenticated user's profile details with a valid JWT token. Also test access without token or with invalid token to verify 401 Unauthorized response.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:3000\"\nAPI_BASE = f\"{BASE_URL}/api\"\nTIMEOUT = 30\n\ndef test_tc004_get_current_user_profile_with_valid_and_invalid_token():\n    login_url = f\"{API_BASE}/auth/login\"\n    me_url = f\"{API_BASE}/auth/me\"\n    valid_credentials = {\n        \"nik\": \"ADM001\",\n        \"password\": \"admin123\"\n    }\n\n    # Step 1: Login to get a valid JWT token\n    try:\n        login_resp = requests.post(login_url, json=valid_credentials, timeout=TIMEOUT)\n        assert login_resp.status_code == 200, f\"Login failed with status {login_resp.status_code}\"\n        login_data = login_resp.json()\n        access_token = login_data.get(\"accessToken\")\n        assert access_token and isinstance(access_token, str), \"Access token missing or invalid in login response\"\n    except Exception as e:\n        raise AssertionError(f\"Exception during login: {e}\")\n\n    headers_valid = {\n        \"Authorization\": f\"Bearer {access_token}\"\n    }\n\n    # Step 2: Access /auth/me with valid token\n    try:\n        me_resp_valid = requests.get(me_url, headers=headers_valid, timeout=TIMEOUT)\n        assert me_resp_valid.status_code == 200, f\"Expected 200 OK for valid token, got {me_resp_valid.status_code}\"\n        profile = me_resp_valid.json()\n        # Validate required fields in user profile\n        for field in [\"id\", \"username\", \"role\", \"createdAt\"]:\n            assert field in profile, f\"Field '{field}' missing in profile response\"\n        assert profile[\"role\"] in [\"administrator\", \"employee\", \"dapur\", \"delivery\"], \"User role invalid\"\n    except Exception as e:\n        raise AssertionError(f\"Exception during valid token profile retrieval: {e}\")\n\n    # Step 3: Access /auth/me without token\n    try:\n        me_resp_no_token = requests.get(me_url, timeout=TIMEOUT)\n        assert me_resp_no_token.status_code == 401, f\"Expected 401 Unauthorized without token, got {me_resp_no_token.status_code}\"\n    except Exception as e:\n        raise AssertionError(f\"Exception during no token profile retrieval: {e}\")\n\n    # Step 4: Access /auth/me with invalid token\n    headers_invalid = {\n        \"Authorization\": \"Bearer invalid.token.value\"\n    }\n    try:\n        me_resp_invalid = requests.get(me_url, headers=headers_invalid, timeout=TIMEOUT)\n        assert me_resp_invalid.status_code == 401, f\"Expected 401 Unauthorized for invalid token, got {me_resp_invalid.status_code}\"\n    except Exception as e:\n        raise AssertionError(f\"Exception during invalid token profile retrieval: {e}\")\n\ntest_tc004_get_current_user_profile_with_valid_and_invalid_token()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"<string>\", line 36, in test_tc004_get_current_user_profile_with_valid_and_invalid_token\nAssertionError: Field 'username' missing in profile response\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 58, in <module>\n  File \"<string>\", line 39, in test_tc004_get_current_user_profile_with_valid_and_invalid_token\nAssertionError: Exception during valid token profile retrieval: Field 'username' missing in profile response\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-05T03:07:33.628Z",
    "modified": "2025-10-05T03:08:44.272Z"
  },
  {
    "projectId": "12686b31-c3da-4a3f-af26-bc9e69e23489",
    "testId": "4327a8a6-b425-485a-b842-f207efb5166b",
    "userId": "64f804e8-2061-7070-d569-d70d597eb938",
    "title": "TC005-list users with proper authorization",
    "description": "Test the GET /users endpoint to retrieve a list of users, ensuring only authorized roles can access this data and the response contains the expected user array.",
    "code": "import requests\nfrom requests.auth import HTTPBasicAuth\n\nBASE_URL = \"http://localhost:3000/api\"\nUSERNAME = \"ADM001\"\nPASSWORD = \"admin123\"\nTIMEOUT = 30\n\ndef test_list_users_with_proper_authorization():\n    try:\n        # First, login to get access token via /auth/login since API uses JWT auth\n        login_url = f\"{BASE_URL}/auth/login\"\n        login_payload = {\"nik\": USERNAME, \"password\": PASSWORD}\n        login_resp = requests.post(login_url, json=login_payload, timeout=TIMEOUT)\n        assert login_resp.status_code == 200, f\"Login failed with status {login_resp.status_code}\"\n        login_data = login_resp.json()\n        access_token = login_data.get(\"accessToken\")\n        assert access_token, \"No access token received after login\"\n\n        # Use access token to access /users endpoint\n        headers = {\n            \"Authorization\": f\"Bearer {access_token}\"\n        }\n        users_url = f\"{BASE_URL}/users\"\n        users_resp = requests.get(users_url, headers=headers, timeout=TIMEOUT)\n\n        # Assert success status code\n        assert users_resp.status_code == 200, f\"Users list request failed with status {users_resp.status_code}\"\n\n        users_data = users_resp.json()\n\n        # Assert the response is a list or contains expected \"users\" list\n        # The PRD summary says \"Array of users\" expected in response\n        assert isinstance(users_data, list) or (isinstance(users_data, dict) and \"users\" in users_data), \\\n            \"Users response is not an array or does not contain 'users' key\"\n\n        # Further validate users array non-empty and contains expected fields if possible\n        user_list = users_data if isinstance(users_data, list) else users_data.get(\"users\", [])\n        assert isinstance(user_list, list), \"Users data is not a list\"\n\n        for user in user_list:\n            assert \"id\" in user, \"User object missing 'id'\"\n            assert \"username\" in user, \"User object missing 'username'\"\n            assert \"role\" in user, \"User object missing 'role'\"\n            assert user[\"role\"] in [\"administrator\", \"employee\", \"dapur\", \"delivery\"], f\"Unexpected user role {user['role']}\"\n            assert \"createdAt\" in user, \"User object missing 'createdAt'\"\n    except requests.RequestException as e:\n        assert False, f\"Request failed: {e}\"\n\ntest_list_users_with_proper_authorization()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 50, in <module>\n  File \"<string>\", line 43, in test_list_users_with_proper_authorization\nAssertionError: User object missing 'username'\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-05T03:07:33.632Z",
    "modified": "2025-10-05T03:09:26.365Z"
  },
  {
    "projectId": "12686b31-c3da-4a3f-af26-bc9e69e23489",
    "testId": "32cc324c-9ae5-42ef-aeb5-9a7e2cd0077b",
    "userId": "64f804e8-2061-7070-d569-d70d597eb938",
    "title": "TC006-create user with valid data and handle conflicts",
    "description": "Test the POST /users endpoint to create a new user with valid input data. Also test creating a user with duplicate or conflicting data to verify 409 Conflict response.",
    "code": "import requests\nimport uuid\n\nBASE_URL = \"http://localhost:3000/api\"\nAUTH_USERNAME = \"ADM001\"\nAUTH_PASSWORD = \"admin123\"\nTIMEOUT = 30\n\n# Function to login and get access token\n\ndef get_access_token(username, password):\n    login_payload = {\n        \"nik\": username,\n        \"password\": password\n    }\n    response = requests.post(f\"{BASE_URL}/auth/login\", json=login_payload, timeout=TIMEOUT)\n    assert response.status_code == 200, f\"Login failed with status {response.status_code}\"\n    data = response.json()\n    assert \"accessToken\" in data, \"Login response missing accessToken\"\n    return data[\"accessToken\"]\n\n\ndef test_create_user_with_valid_data_and_handle_conflicts():\n    access_token = get_access_token(AUTH_USERNAME, AUTH_PASSWORD)\n    headers = {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": f\"Bearer {access_token}\"\n    }\n\n    # Generate unique username to avoid conflicts for first create\n    unique_suffix = str(uuid.uuid4())[:8]\n    user_payload = {\n        \"username\": f\"testuser_{unique_suffix}\",\n        \"password\": \"TestPass123!\",\n        \"role\": \"employee\",\n        \"nik\": f\"nik{unique_suffix}\"\n    }\n\n    # Create user function\n    def create_user(payload):\n        response = requests.post(f\"{BASE_URL}/users\", json=payload, headers=headers, timeout=TIMEOUT)\n        return response\n\n    # Delete user function to cleanup\n    def delete_user(user_id):\n        # Assume DELETE /users/{id} exists for cleanup (not documented, but needed for cleanup)\n        # If not, skip deletion.\n        try:\n            requests.delete(f\"{BASE_URL}/users/{user_id}\", headers=headers, timeout=TIMEOUT)\n        except Exception:\n            pass\n\n    user_id = None\n\n    try:\n        # First: Create new user with valid data\n        response = create_user(user_payload)\n        assert response.status_code == 201, f\"Expected 201 Created, got {response.status_code}\"\n        data = response.json()\n        assert \"id\" in data, \"Response missing user id\"\n        user_id = data[\"id\"]\n\n        # Second: Attempt to create user with same username to cause conflict (409)\n        conflict_payload = user_payload.copy()\n        conflict_response = create_user(conflict_payload)\n        assert conflict_response.status_code == 409, f\"Expected 409 Conflict on duplicate user creation, got {conflict_response.status_code}\"\n\n        # Third: Attempt to create user with same NIK to cause conflict (assuming NIK unique)\n        another_unique_username = f\"testuser_{str(uuid.uuid4())[:8]}\"\n        conflict_payload2 = user_payload.copy()\n        conflict_payload2[\"username\"] = another_unique_username  # different username\n        conflict_response2 = create_user(conflict_payload2)\n        # This may succeed or conflict depending on NIK uniqueness enforcement\n        # So we test for 409 or success 201 if NIK is not unique\n        assert conflict_response2.status_code in (201, 409), f\"Expected 201 or 409 on NIK conflict test, got {conflict_response2.status_code}\"\n\n        # If second conflict attempt succeeded (201), delete that user too\n        if conflict_response2.status_code == 201:\n            created_user2 = conflict_response2.json()\n            if \"id\" in created_user2:\n                delete_user(created_user2[\"id\"])\n\n    finally:\n        if user_id:\n            delete_user(user_id)\n\n\ntest_create_user_with_valid_data_and_handle_conflicts()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 88, in <module>\n  File \"<string>\", line 58, in test_create_user_with_valid_data_and_handle_conflicts\nAssertionError: Expected 201 Created, got 400\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-05T03:07:33.637Z",
    "modified": "2025-10-05T03:11:09.314Z"
  },
  {
    "projectId": "12686b31-c3da-4a3f-af26-bc9e69e23489",
    "testId": "3ced36b7-30fb-4258-8c63-930ad20a2d83",
    "userId": "64f804e8-2061-7070-d569-d70d597eb938",
    "title": "TC007-update user status successfully",
    "description": "Test the PATCH /users/{id}/status endpoint to update the status of a user by ID, verifying the status change is applied and a success response is returned.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:3000/api\"\nAUTH_NIK = \"ADM001\"\nAUTH_PASSWORD = \"admin123\"\nTIMEOUT = 30\n\ndef get_auth_token():\n    login_payload = {\n        \"nik\": AUTH_NIK,\n        \"password\": AUTH_PASSWORD\n    }\n    resp = requests.post(f\"{BASE_URL}/auth/login\", json=login_payload, timeout=TIMEOUT)\n    assert resp.status_code == 200, f\"Login failed with status code {resp.status_code}\"\n    data = resp.json()\n    token = data.get(\"accessToken\")\n    assert token, \"Access token not found in login response\"\n    return token\n\ndef test_update_user_status_successfully():\n    token = get_auth_token()\n    headers = {\"Content-Type\": \"application/json\", \"Authorization\": f\"Bearer {token}\"}\n\n    user_create_payload = {\n        \"nik\": \"TESTUSER007\",\n        \"username\": \"testuser_tc007\",\n        \"password\": \"TestPass123!\",\n        \"role\": \"employee\"\n    }\n    created_user_id = None\n\n    try:\n        # Create a new user to update status\n        create_resp = requests.post(f\"{BASE_URL}/users\", json=user_create_payload, headers=headers, timeout=TIMEOUT)\n        assert create_resp.status_code == 201, f\"User creation failed with status code {create_resp.status_code}\"\n        created_user = create_resp.json()\n        created_user_id = created_user.get(\"id\")\n        assert created_user_id, \"Created user ID not found in response\"\n\n        # Patch user status\n        patch_payload = {\"status\": \"inactive\"}\n        patch_resp = requests.patch(f\"{BASE_URL}/users/{created_user_id}/status\", json=patch_payload, headers=headers, timeout=TIMEOUT)\n        assert patch_resp.status_code == 200, f\"Status update failed with status code {patch_resp.status_code}\"\n\n        # Get user to verify status update\n        get_resp = requests.get(f\"{BASE_URL}/users/{created_user_id}\", headers=headers, timeout=TIMEOUT)\n        assert get_resp.status_code == 200, f\"Get user failed with status code {get_resp.status_code}\"\n        user_data = get_resp.json()\n        # The PRD does not specify status field in user detail. We will skip checking status field presence or value.\n\n    finally:\n        # Cleanup removed as DELETE endpoint for user is not specified in PRD\n        pass\n\n\ntest_update_user_status_successfully()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 56, in <module>\n  File \"<string>\", line 35, in test_update_user_status_successfully\nAssertionError: User creation failed with status code 400\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-05T03:07:33.642Z",
    "modified": "2025-10-05T03:11:09.284Z"
  },
  {
    "projectId": "12686b31-c3da-4a3f-af26-bc9e69e23489",
    "testId": "bae41a32-fae6-4928-a43d-61c7e8f69c5d",
    "userId": "64f804e8-2061-7070-d569-d70d597eb938",
    "title": "TC008-update user role successfully",
    "description": "Test the PATCH /users/{id}/role endpoint to update the role of a user by ID, ensuring the role is updated correctly and a success response is returned.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:3000/api\"\nTIMEOUT = 30\n\nLOGIN_NIK = \"ADM001\"\nLOGIN_PASSWORD = \"admin123\"\n\n\ndef get_access_token():\n    login_payload = {\"nik\": LOGIN_NIK, \"password\": LOGIN_PASSWORD}\n    headers_json = {\"Content-Type\": \"application/json\"}\n    resp = requests.post(f\"{BASE_URL}/auth/login\", json=login_payload, headers=headers_json, timeout=TIMEOUT)\n    assert resp.status_code == 200, f\"Login failed: {resp.status_code} {resp.text}\"\n    data = resp.json()\n    access_token = data.get(\"accessToken\")\n    assert access_token, \"Access token not found in login response\"\n    return access_token\n\n\ndef test_update_user_role_successfully():\n    access_token = get_access_token()\n    headers_json = {\"Content-Type\": \"application/json\", \"Authorization\": f\"Bearer {access_token}\"}\n\n    # Create a new user to update role\n    create_payload = {\n        \"username\": \"testuser_role_update\",\n        \"nik\": \"1234567890\",\n        \"password\": \"TestPass123!\",\n        \"role\": \"employee\"\n    }\n\n    created_user_id = None\n\n    # Create user first, then update role, then finally delete user\n    try:\n        # Create User\n        create_resp = requests.post(\n            f\"{BASE_URL}/users\",\n            json=create_payload,\n            headers=headers_json,\n            timeout=TIMEOUT\n        )\n        assert create_resp.status_code == 201, f\"User creation failed: {create_resp.status_code} {create_resp.text}\"\n        created_user = create_resp.json()\n        created_user_id = created_user.get(\"id\")\n        assert created_user_id, \"Created user ID not found in response\"\n\n        # Choose a different role to update to (not original)\n        new_role = \"dapur\" if create_payload[\"role\"] != \"dapur\" else \"administrator\"\n        update_payload = {\"role\": new_role}\n\n        # Update user role\n        patch_resp = requests.patch(\n            f\"{BASE_URL}/users/{created_user_id}/role\",\n            json=update_payload,\n            headers=headers_json,\n            timeout=TIMEOUT\n        )\n        assert patch_resp.status_code == 200, f\"Role update failed: {patch_resp.status_code} {patch_resp.text}\"\n\n        # Verify updated role by retrieving user details\n        get_resp = requests.get(\n            f\"{BASE_URL}/users/{created_user_id}\",\n            headers={\"Authorization\": f\"Bearer {access_token}\"},\n            timeout=TIMEOUT\n        )\n        assert get_resp.status_code == 200, f\"Getting user failed: {get_resp.status_code} {get_resp.text}\"\n        user_data = get_resp.json()\n        assert user_data.get(\"role\") == new_role, f\"Role not updated correctly, expected '{new_role}', got '{user_data.get('role')}'\"\n\n    finally:\n        # Clean up: delete the created user if exists\n        if created_user_id:\n            try:\n                del_resp = requests.delete(\n                    f\"{BASE_URL}/users/{created_user_id}\",\n                    headers={\"Authorization\": f\"Bearer {access_token}\"},\n                    timeout=TIMEOUT\n                )\n                # Accept 200 OK or 204 No Content as successful deletion\n                assert del_resp.status_code in (200, 204), f\"User deletion failed: {del_resp.status_code} {del_resp.text}\"\n            except Exception:\n                pass\n\n\ntest_update_user_role_successfully()",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/urllib3/connectionpool.py\", line 787, in urlopen\n    response = self._make_request(\n               ^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/urllib3/connectionpool.py\", line 534, in _make_request\n    response = conn.getresponse()\n               ^^^^^^^^^^^^^^^^^^\n  File \"/var/task/urllib3/connection.py\", line 565, in getresponse\n    httplib_response = super().getresponse()\n                       ^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/lang/lib/python3.12/http/client.py\", line 1430, in getresponse\n    response.begin()\n  File \"/var/lang/lib/python3.12/http/client.py\", line 331, in begin\n    version, status, reason = self._read_status()\n                              ^^^^^^^^^^^^^^^^^^^\n  File \"/var/lang/lib/python3.12/http/client.py\", line 292, in _read_status\n    line = str(self.fp.readline(_MAXLINE + 1), \"iso-8859-1\")\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/lang/lib/python3.12/socket.py\", line 720, in readinto\n    return self._sock.recv_into(b)\n           ^^^^^^^^^^^^^^^^^^^^^^^\nConnectionResetError: [Errno 104] Connection reset by peer\n\nThe above exception was the direct cause of the following exception:\n\nurllib3.exceptions.ProxyError: ('Unable to connect to proxy', ConnectionResetError(104, 'Connection reset by peer'))\n\nThe above exception was the direct cause of the following exception:\n\nTraceback (most recent call last):\n  File \"/var/task/requests/adapters.py\", line 667, in send\n    resp = conn.urlopen(\n           ^^^^^^^^^^^^^\n  File \"/var/task/urllib3/connectionpool.py\", line 841, in urlopen\n    retries = retries.increment(\n              ^^^^^^^^^^^^^^^^^^\n  File \"/var/task/urllib3/util/retry.py\", line 519, in increment\n    raise MaxRetryError(_pool, url, reason) from reason  # type: ignore[arg-type]\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nurllib3.exceptions.MaxRetryError: HTTPConnectionPool(host='tun.testsprite.com', port=8080): Max retries exceeded with url: http://localhost:3000/api/users (Caused by ProxyError('Unable to connect to proxy', ConnectionResetError(104, 'Connection reset by peer')))\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 87, in <module>\n  File \"<string>\", line 38, in test_update_user_role_successfully\n  File \"/var/task/requests/api.py\", line 115, in post\n    return request(\"post\", url, data=data, json=json, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/requests/api.py\", line 59, in request\n    return session.request(method=method, url=url, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/requests/sessions.py\", line 589, in request\n    resp = self.send(prep, **send_kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/requests/sessions.py\", line 703, in send\n    r = adapter.send(request, **kwargs)\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/var/task/requests/adapters.py\", line 694, in send\n    raise ProxyError(e, request=request)\nrequests.exceptions.ProxyError: HTTPConnectionPool(host='tun.testsprite.com', port=8080): Max retries exceeded with url: http://localhost:3000/api/users (Caused by ProxyError('Unable to connect to proxy', ConnectionResetError(104, 'Connection reset by peer')))\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-05T03:07:33.647Z",
    "modified": "2025-10-05T03:10:17.453Z"
  },
  {
    "projectId": "12686b31-c3da-4a3f-af26-bc9e69e23489",
    "testId": "de7d6b9a-e721-4b57-b255-cde9c3ee39c9",
    "userId": "64f804e8-2061-7070-d569-d70d597eb938",
    "title": "TC009-reset user password successfully",
    "description": "Test the POST /users/{id}/reset-password endpoint to reset the password of a user by ID, verifying the operation completes successfully with appropriate response.",
    "code": "import requests\n\nBASE_URL = \"http://localhost:3000/api\"\nNIK = \"ADM001\"\nPASSWORD = \"admin123\"\nTIMEOUT = 30\n\n\ndef get_access_token():\n    login_payload = {\n        \"nik\": NIK,\n        \"password\": PASSWORD\n    }\n    response = requests.post(f\"{BASE_URL}/auth/login\", json=login_payload, timeout=TIMEOUT)\n    assert response.status_code == 200, f\"Login failed: {response.text}\"\n    data = response.json()\n    access_token = data.get(\"accessToken\")\n    assert isinstance(access_token, str) and access_token != \"\"\n    return access_token\n\n\ndef test_reset_user_password_successfully():\n    access_token = get_access_token()\n    headers = {\n        \"Accept\": \"application/json\",\n        \"Authorization\": f\"Bearer {access_token}\"\n    }\n\n    # Step 1: Create a new user to reset password for\n    create_user_payload = {\n        \"nik\": \"testuser_resetpw\",\n        \"namaLengkap\": \"Test User ResetPW\",\n        \"roleAccess\": \"employee\"\n    }\n\n    created_user_id = None\n    try:\n        # Create user\n        create_response = requests.post(\n            f\"{BASE_URL}/users\",\n            json=create_user_payload,\n            headers=headers,\n            timeout=TIMEOUT,\n        )\n        assert create_response.status_code == 201, f\"User creation failed: {create_response.text}\"\n        created_user = create_response.json()\n        created_user_id = created_user.get(\"id\")\n        assert isinstance(created_user_id, str) and created_user_id != \"\"\n\n        # Step 2: Reset password for the created user\n        reset_password_response = requests.post(\n            f\"{BASE_URL}/users/{created_user_id}/reset-password\",\n            headers=headers,\n            timeout=TIMEOUT,\n        )\n        assert reset_password_response.status_code == 200, f\"Password reset failed: {reset_password_response.text}\"\n    finally:\n        # Cleanup: Delete the created user\n        if created_user_id:\n            try:\n                requests.delete(\n                    f\"{BASE_URL}/users/{created_user_id}\",\n                    headers=headers,\n                    timeout=TIMEOUT,\n                )\n            except Exception:\n                pass\n\n\ntest_reset_user_password_successfully()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 70, in <module>\n  File \"<string>\", line 45, in test_reset_user_password_successfully\nAssertionError: User creation failed: {\"message\":[\"password must be longer than or equal to 6 characters\",\"password should not be empty\",\"password must be a string\"],\"error\":\"Bad Request\",\"statusCode\":400}\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-05T03:07:33.652Z",
    "modified": "2025-10-05T03:11:46.943Z"
  },
  {
    "projectId": "12686b31-c3da-4a3f-af26-bc9e69e23489",
    "testId": "d18e66a1-5f2f-4e9a-877b-45fe0d35042b",
    "userId": "64f804e8-2061-7070-d569-d70d597eb938",
    "title": "TC010-update user profile successfully",
    "description": "Test the PATCH /users/{id}/profile endpoint to update user profile information by ID, ensuring the changes are saved and a success response is returned.",
    "code": "import requests\nfrom requests.auth import HTTPBasicAuth\nimport json\n\nBASE_URL = \"http://localhost:3000/api\"\nUSERNAME = \"ADM001\"\nPASSWORD = \"admin123\"\nTIMEOUT = 30\n\ndef login():\n    url = f\"{BASE_URL}/auth/login\"\n    payload = {\n        \"nik\": USERNAME,\n        \"password\": PASSWORD\n    }\n    headers = {\n        \"Content-Type\": \"application/json\"\n    }\n    response = requests.post(url, json=payload, headers=headers, timeout=TIMEOUT)\n    response.raise_for_status()\n    data = response.json()\n    # Assert full LoginResponse schema\n    assert \"accessToken\" in data and \"refreshToken\" in data and \"user\" in data\n    user = data[\"user\"]\n    assert \"id\" in user and \"username\" in user and \"role\" in user and \"createdAt\" in user\n    return data[\"accessToken\"], user[\"id\"]\n\ndef create_user(token):\n    url = f\"{BASE_URL}/users\"\n    headers = {\n        \"Authorization\": f\"Bearer {token}\",\n        \"Content-Type\": \"application/json\"\n    }\n    import uuid\n    unique_nik = f\"testnik_{uuid.uuid4().hex[:8]}\"\n    user_data = {\n        \"nik\": unique_nik,\n        \"password\": \"TestPass123!\",\n        \"role\": \"employee\"\n    }\n    response = requests.post(url, json=user_data, headers=headers, timeout=TIMEOUT)\n    if response.status_code == 201:\n        created_user = response.json()\n        assert \"id\" in created_user\n        return created_user[\"id\"]\n    elif response.status_code == 409:\n        raise RuntimeError(\"Conflict on creating user, username might exist\")\n    else:\n        response.raise_for_status()\n\ndef delete_user(token, user_id):\n    url = f\"{BASE_URL}/users/{user_id}\"\n    headers = {\n        \"Authorization\": f\"Bearer {token}\"\n    }\n    response = requests.delete(url, headers=headers, timeout=TIMEOUT)\n    if response.status_code not in (200, 204):\n        response.raise_for_status()\n\ndef update_user_profile_successfully():\n    access_token, user_id = login()\n\n    new_user_id = None\n    headers = {\n        \"Authorization\": f\"Bearer {access_token}\",\n        \"Content-Type\": \"application/json\"\n    }\n\n    try:\n        new_user_id = create_user(access_token)\n\n        profile_update_payload = {\n            \"username\": \"updated_testuser\",\n            \"fullname\": \"Updated Test User\",\n            \"email\": \"updated_testuser@example.com\",\n            \"phone\": \"08123456789\"\n        }\n\n        url = f\"{BASE_URL}/users/{new_user_id}/profile\"\n        response = requests.patch(url, json=profile_update_payload, headers=headers, timeout=TIMEOUT)\n        assert response.status_code == 200, f\"Expected 200 OK but got {response.status_code}\"\n        resp_json = response.json()\n        for key, val in profile_update_payload.items():\n            assert key in resp_json and resp_json[key] == val\n\n    finally:\n        if new_user_id:\n            delete_user(access_token, new_user_id)\n\nupdate_user_profile_successfully()\n",
    "testStatus": "FAILED",
    "testError": "Traceback (most recent call last):\n  File \"/var/task/handler.py\", line 258, in run_with_retry\n    exec(code, exec_env)\n  File \"<string>\", line 90, in <module>\n  File \"<string>\", line 61, in update_user_profile_successfully\n  File \"<string>\", line 25, in login\nAssertionError\n",
    "testType": "BACKEND",
    "createFrom": "mcp",
    "created": "2025-10-05T03:07:33.658Z",
    "modified": "2025-10-05T03:11:46.948Z"
  }
]
